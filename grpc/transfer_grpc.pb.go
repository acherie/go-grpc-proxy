// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TransferClient is the client API for Transfer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TransferClient interface {
	SendData(ctx context.Context, opts ...grpc.CallOption) (Transfer_SendDataClient, error)
}

type transferClient struct {
	cc grpc.ClientConnInterface
}

func NewTransferClient(cc grpc.ClientConnInterface) TransferClient {
	return &transferClient{cc}
}

func (c *transferClient) SendData(ctx context.Context, opts ...grpc.CallOption) (Transfer_SendDataClient, error) {
	stream, err := c.cc.NewStream(ctx, &Transfer_ServiceDesc.Streams[0], "/transfer.Transfer/SendData", opts...)
	if err != nil {
		return nil, err
	}
	x := &transferSendDataClient{stream}
	return x, nil
}

type Transfer_SendDataClient interface {
	Send(*ProxyCmd) error
	Recv() (*ProxyCmd, error)
	grpc.ClientStream
}

type transferSendDataClient struct {
	grpc.ClientStream
}

func (x *transferSendDataClient) Send(m *ProxyCmd) error {
	return x.ClientStream.SendMsg(m)
}

func (x *transferSendDataClient) Recv() (*ProxyCmd, error) {
	m := new(ProxyCmd)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TransferServer is the server API for Transfer service.
// All implementations must embed UnimplementedTransferServer
// for forward compatibility
type TransferServer interface {
	SendData(Transfer_SendDataServer) error
	mustEmbedUnimplementedTransferServer()
}

// UnimplementedTransferServer must be embedded to have forward compatible implementations.
type UnimplementedTransferServer struct {
}

func (UnimplementedTransferServer) SendData(Transfer_SendDataServer) error {
	return status.Errorf(codes.Unimplemented, "method SendData not implemented")
}
func (UnimplementedTransferServer) mustEmbedUnimplementedTransferServer() {}

// UnsafeTransferServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TransferServer will
// result in compilation errors.
type UnsafeTransferServer interface {
	mustEmbedUnimplementedTransferServer()
}

func RegisterTransferServer(s grpc.ServiceRegistrar, srv TransferServer) {
	s.RegisterService(&Transfer_ServiceDesc, srv)
}

func _Transfer_SendData_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TransferServer).SendData(&transferSendDataServer{stream})
}

type Transfer_SendDataServer interface {
	Send(*ProxyCmd) error
	Recv() (*ProxyCmd, error)
	grpc.ServerStream
}

type transferSendDataServer struct {
	grpc.ServerStream
}

func (x *transferSendDataServer) Send(m *ProxyCmd) error {
	return x.ServerStream.SendMsg(m)
}

func (x *transferSendDataServer) Recv() (*ProxyCmd, error) {
	m := new(ProxyCmd)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Transfer_ServiceDesc is the grpc.ServiceDesc for Transfer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Transfer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "transfer.Transfer",
	HandlerType: (*TransferServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SendData",
			Handler:       _Transfer_SendData_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "grpc/transfer.proto",
}
